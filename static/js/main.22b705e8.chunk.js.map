{"version":3,"sources":["Pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","typography","fontFamily","Home","classes","this","props","className","root","style","background","blueGrey","info","particles","params","polygon","enable","type","move","radius","number","value","line_linked","size","Typography","color","variant","gutterBottom","align","React","Component","withStyles","mixins","gutters","paddingTop","spacing","unit","paddingBottom","height","window","innerHeight","backgroundColor","linkColor","position","width","innerWidth","top","secondary","grey","App","state","textColor","handleChange","event","setState","handleTabClick","scrollToComponent","offset","handleScroll","spot","pageYOffset","window_height","addEventListener","removeEventListener","onScroll","AppBar","Tabs","onChange","indicatorColor","centered","fixed","Tab","label","onClick","ref","section","dislaimer","disclaimerText","href","flexGrow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22b705e8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Particles from 'react-particles-js';\n\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: \"#FFFFFF\"\n      },\n    },\n    typography: {\n      fontFamily: [\n        'Muli',\n      ],\n    }\n  });\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    height: window.innerHeight, \n    backgroundColor: blueGrey[800],\n  },\n  info: {\n    paddingTop: window.innerHeight / 2 - 100,\n  },\n  linkColor: {\n    color: \"#FFFFFF\",\n    height: 25\n  },\n  particles: {\n    position: 'absolute',\n    height: window.innerHeight,\n    width: window.innerWidth - 50,\n    top: 20,\n  }\n});\n\nclass Home extends React.Component {\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root} style={{background: blueGrey}}>\n        <div className={classes.info}>\n            <Particles className={classes.particles}\n              params={{\n                  polygon: {\n                      enable: false,\n                      type: 'inside',\n                      move: {\n                          radius: 10\n                      },\n                  },\n                  particles: {\n                    number: {\n                      value: 50\n                    },\n                    line_linked: {\n                      enable: false\n                    },\n                    size: {\n                      value: 3\n                    }\n                  }\n              }} />\n          <MuiThemeProvider theme={theme}>\n            <Typography color={theme.primary} variant=\"h3\" gutterBottom align='center'> Semira Chung </Typography>\n            <Typography color={theme.primary} variant=\"h5\" gutterBottom align='center'> &#60; incoming software engineer &#47;&#62; </Typography>\n          </MuiThemeProvider>\n        </div>\n      </div>\n    );\n  }\n}\n\nHome.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Home);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Home from './Pages/Home'\n// import About from './Pages/About'\n// import Work from './Pages/Work'\n// import Projects from './Pages/Projects'\nimport grey from '@material-ui/core/colors/grey';\nimport teal from '@material-ui/core/colors/teal';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport scrollToComponent from 'react-scroll-to-component';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: \"#FFFFFF\"\n      },\n      secondary: {\n        main: grey[800]\n      },\n    },\n    typography: {\n      fontFamily: [\n        'Muli',\n      ],\n    }\n  });\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst styles = () => ({\n  root: {\n    flexGrow: 1,\n    width: '100%',\n  },\n  disclaimerText: {\n    backgroundColor: grey[800],\n    color: \"#FFFFFF\",\n  }\n});\n\nclass App extends React.Component {\n  state = {\n    value: 0,\n    color: blueGrey[800],\n    textColor: theme.primary\n  };\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  handleTabClick = (value) => {\n    switch(value) {\n      case 0:\n        scrollToComponent(this.Home, { offset: 0, align: 'top'})\n        this.setState({color: blueGrey[800]});\n        break;\n      // case 1:\n      //   scrollToComponent(this.About, { offset: 0, align: 'top'})\n      //   this.setState({color: grey[800]});\n      //   break;\n      // case 2:\n      //   scrollToComponent(this.Work, { offset: 0, align: 'top'})\n      //   this.setState({color: teal[200]});\n      //   break;\n      // case 3:\n      //   scrollToComponent(this.Projects, { offset: 0, align: 'top'})\n      //   this.setState({color: blueGrey[300]});\n      //   break;\n      default:\n        scrollToComponent(this.Home, { offset: 0, align: 'top'})\n          this.setState({color: blueGrey[800]});\n          break;\n    }\n  }\n\n  //changes color of navbar depending on current div scrolled\n  handleScroll = () => {\n    var spot = window.pageYOffset;\n    var window_height = window.innerHeight;\n\n    //home page\n    if(spot >= 0 && spot <= window_height) {\n      this.handleChange(0);\n      this.setState({color: blueGrey[800]});\n    } //about page\n    // else if(spot > window_height && spot < window_height * 2) {\n    //   this.handleChange(2);\n    //   this.setState({color: grey[800]});\n    // } //work experience page\n    // else if(spot >= window_height * 2 && spot < (window_height * 3 + 650)) {\n    //   this.handleChange(3);\n    //   this.setState({color: grey[900]});\n    // } //projects page\n    // else {\n    //   this.handleChange(4);\n    //   this.setState({color: grey[800]});\n    // }\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n\n    return (\n      <div onScroll={this.handleScroll}>\n        <AppBar className={classes.root} position=\"fixed\" style={{backgroundColor: this.state.color}}>\n          <MuiThemeProvider theme={theme}>\n            <Tabs\n              value={value}\n              onChange={this.handleChange}\n              indicatorColor={theme.secondary}\n              textColor={theme.secondary}\n              centered\n              fixed\n            >\n              <Tab label=\"HOME\" onClick={() => this.handleTabClick(0)}/>\n              {/* <Tab label=\"ABOUT\" onClick={() => this.handleTabClick(1)}/>\n              <Tab label=\"WORK EXPERIENCE\" onClick={() => this.handleTabClick(2)}/>\n              <Tab label=\"PROJECTS\" onClick={() => this.handleTabClick(3)}/> */}\n            </Tabs>\n          </MuiThemeProvider>\n        </AppBar>\n        <section><Home className='home' ref={(section) => { this.Home = section; }} theme={theme}/></section>\n        {/* <section><About className='about' ref={(section) => { this.About = section; }} theme={theme}/></section>\n        <section><Work className='work' ref={(section) => { this.Work = section; }} theme={theme}/></section>\n        <section><Projects className='project' ref={(section) => { this.Projects = section; }} theme={theme}/></section> */}\n        <div className={classes.dislaimer}>\n          <Typography color={\"primary\"} variant=\"body2\" gutterBottom align='center' className={classes.disclaimerText}>SEMIRA CHUNG <a href=\"https://github.com/smrchung/main\">©</a> 2020</Typography>\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}